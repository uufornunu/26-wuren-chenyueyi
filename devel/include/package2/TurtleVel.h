// Generated by gencpp from file package2/TurtleVel.msg
// DO NOT EDIT!


#ifndef PACKAGE2_MESSAGE_TURTLEVEL_H
#define PACKAGE2_MESSAGE_TURTLEVEL_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace package2
{
template <class ContainerAllocator>
struct TurtleVel_
{
  typedef TurtleVel_<ContainerAllocator> Type;

  TurtleVel_()
    : linear_x(0.0)
    , linear_y(0.0)  {
    }
  TurtleVel_(const ContainerAllocator& _alloc)
    : linear_x(0.0)
    , linear_y(0.0)  {
  (void)_alloc;
    }



   typedef float _linear_x_type;
  _linear_x_type linear_x;

   typedef float _linear_y_type;
  _linear_y_type linear_y;





  typedef boost::shared_ptr< ::package2::TurtleVel_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::package2::TurtleVel_<ContainerAllocator> const> ConstPtr;

}; // struct TurtleVel_

typedef ::package2::TurtleVel_<std::allocator<void> > TurtleVel;

typedef boost::shared_ptr< ::package2::TurtleVel > TurtleVelPtr;
typedef boost::shared_ptr< ::package2::TurtleVel const> TurtleVelConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::package2::TurtleVel_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::package2::TurtleVel_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::package2::TurtleVel_<ContainerAllocator1> & lhs, const ::package2::TurtleVel_<ContainerAllocator2> & rhs)
{
  return lhs.linear_x == rhs.linear_x &&
    lhs.linear_y == rhs.linear_y;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::package2::TurtleVel_<ContainerAllocator1> & lhs, const ::package2::TurtleVel_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace package2

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::package2::TurtleVel_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::package2::TurtleVel_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::package2::TurtleVel_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::package2::TurtleVel_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::package2::TurtleVel_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::package2::TurtleVel_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::package2::TurtleVel_<ContainerAllocator> >
{
  static const char* value()
  {
    return "a3fdb229f5180380da4e895a9cc9fb8d";
  }

  static const char* value(const ::package2::TurtleVel_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xa3fdb229f5180380ULL;
  static const uint64_t static_value2 = 0xda4e895a9cc9fb8dULL;
};

template<class ContainerAllocator>
struct DataType< ::package2::TurtleVel_<ContainerAllocator> >
{
  static const char* value()
  {
    return "package2/TurtleVel";
  }

  static const char* value(const ::package2::TurtleVel_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::package2::TurtleVel_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float32 linear_x\n"
"float32 linear_y\n"
;
  }

  static const char* value(const ::package2::TurtleVel_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::package2::TurtleVel_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.linear_x);
      stream.next(m.linear_y);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct TurtleVel_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::package2::TurtleVel_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::package2::TurtleVel_<ContainerAllocator>& v)
  {
    if (false || !indent.empty())
      s << std::endl;
    s << indent << "linear_x: ";
    Printer<float>::stream(s, indent + "  ", v.linear_x);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "linear_y: ";
    Printer<float>::stream(s, indent + "  ", v.linear_y);
  }
};

} // namespace message_operations
} // namespace ros

#endif // PACKAGE2_MESSAGE_TURTLEVEL_H
